AWSTemplateFormatVersion: 2010-09-09

## =================== DESCRIPTION =================== ##
Description: >-
  A Cloudformation Stack for building a Network zone with
  2 private zone in  2 different availability zone,
  2 public zone in  2 different availability zone,
  Simple website is reachable with loadbalancing,
  Server that host website are auto-scaled and only provisionned in private zone,
  Predefined email get message about the autoscaling change.
    - Amazon VPC(Subnet,InternetGateway,RouteTable,NatGateway)
    - Amazon SNS
    - Amazon EC2 Auto Scaling
    - Amazon Elastic Load Balancing
  After stack is launched and finished,User need to :
   1. check URL of loadbalancer to see the web page
   2. refresh the URL to see loadbalancing

## ===================== METADATA ===================== ##
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Tag parameters for all tagable resources
        Parameters:
          - paramUniqueTagName
          - paramUniqueTagValue
      - Label:
          default: Email configuration
        Parameters:
          - paramOperatorEmail

## ==================== PARAMETERS ==================== ##
Parameters:
  paramUniqueTagName:
    Type: String
    Default: 'yuanchao-handson-tag'
    Description: unique tag for all resources defined in this stack Cloudformation
  paramUniqueTagValue:
    Type: String
    Description: unique tag's value
  paramOperatorEmail:
    Description: The email address to notify when there are any scaling activities
    Type: String

## ==================== MAPPINGS ==================== ##
Mappings:
  DefaultCIDR: 
    VPC:
      CIDR: '10.10.0.0/16'
    Subnet1:
      CIDR: '10.10.10.0/24'
    Subnet2:
      CIDR: '10.10.11.0/24'
    Subnet3:
      CIDR: '10.10.20.0/24'
    Subnet4:
      CIDR: '10.10.21.0/24'
  DefaultAMI: 
    Ubuntu:
      AMI: 'ami-01d21b7be69801c2f'
    Amazon:
      AMI: 'ami-03f12ae727bb56d85'
  DefaultInstanceType: 
    T2-MICRO:
      IT: 't2.micro'

## ==================== CONDITIONS ==================== ##
#Conditions:


## =================== RESOURCES =================== ##
Resources:

  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [DefaultCIDR, VPC, CIDR]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: !Ref paramUniqueTagName
          Value: !Ref paramUniqueTagValue

  myIG:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: !Ref paramUniqueTagName
          Value: !Ref paramUniqueTagValue

  myIGAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref myIG
      VpcId: !Ref myVPC
  
  myPublicSubnetZone1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !FindInMap [DefaultCIDR, Subnet1, CIDR]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: !Ref paramUniqueTagName
          Value: !Ref paramUniqueTagValue

  myPublicSubnetZone2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region' # '' is equivalent to specifying AWS::Region
      CidrBlock: !FindInMap [DefaultCIDR, Subnet2, CIDR]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: !Ref paramUniqueTagName
          Value: !Ref paramUniqueTagValue

  myPublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: !Ref paramUniqueTagName
          Value: !Ref paramUniqueTagValue

  myPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: myIGAttachment
    Properties:
      RouteTableId: !Ref myPublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref myIG

  myPublicSRTAZone1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPublicRT
      SubnetId: !Ref myPublicSubnetZone1

  myPublicSRTAZone2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPublicRT
      SubnetId: !Ref myPublicSubnetZone2


  myEIPZone1:
    Type: AWS::EC2::EIP
    DependsOn: myIGAttachment
    Properties:
      Domain: myVPC
      Tags:
        - Key: !Ref paramUniqueTagName
          Value: !Ref paramUniqueTagValue

  myNGZone1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt myEIPZone1.AllocationId
      SubnetId: !Ref myPublicSubnetZone1
      Tags:
        - Key: !Ref paramUniqueTagName
          Value: !Ref paramUniqueTagValue

  myPrivateSubnetZone1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !FindInMap [DefaultCIDR, Subnet3, CIDR]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: !Ref paramUniqueTagName
          Value: !Ref paramUniqueTagValue

  myPrivateRTZone1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: !Ref paramUniqueTagName
          Value: !Ref paramUniqueTagValue

  myPrivateRouteZone1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref myPrivateRTZone1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref myNGZone1

  myPrivateZone1SRTA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPrivateRTZone1
      SubnetId: !Ref myPrivateSubnetZone1


  myPrivateSubnetZone2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !FindInMap [DefaultCIDR, Subnet4, CIDR]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: !Ref paramUniqueTagName
          Value: !Ref paramUniqueTagValue

  myEIPZone2:
    Type: AWS::EC2::EIP
    DependsOn: myIGAttachment
    Properties:
      Domain: myVPC
      Tags:
        - Key: !Ref paramUniqueTagName
          Value: !Ref paramUniqueTagValue

  myNGZone2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt myEIPZone2.AllocationId
      SubnetId: !Ref myPublicSubnetZone2
      Tags:
        - Key: !Ref paramUniqueTagName
          Value: !Ref paramUniqueTagValue

  myPrivateRTZone2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: !Ref paramUniqueTagName
          Value: !Ref paramUniqueTagValue

  myPrivateRouteZone2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref myPrivateRTZone2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref myNGZone2

  myPrivateSRTSZone2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPrivateRTZone2
      SubnetId: !Ref myPrivateSubnetZone2


  myELBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ELB Security Group
      VpcId: !Ref myVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0

  myEC2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 Security Group for EC2 launch template
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  
  myEC2InboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !GetAtt myELBSG.GroupId
      GroupId: !GetAtt myEC2SG.GroupId
  
  myELB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets: 
       - !Ref myPublicSubnetZone1
       - !Ref myPublicSubnetZone2
      SecurityGroups:
        - !GetAtt myELBSG.GroupId

  myELBTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 300
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 120
      HealthyThresholdCount: 10
      Matcher:
        HttpCode: '200'
      Name: !Sub 
        - 'eltg-${tagvalue}'
        - tagvalue: !Ref paramUniqueTagValue
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 3
      VpcId: !Ref myVPC
  
  myELBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref myELBTG
      LoadBalancerArn: !Ref myELB
      Port: 80
      Protocol: HTTP
  
  myEC2KeyPair:
    Type: 'AWS::EC2::KeyPair'
    Properties: 
      KeyName: !Sub 
        - 'keypair-${tagvalue}'
        - tagvalue: !Ref paramUniqueTagValue
      Tags:
        - Key: !Ref paramUniqueTagName
          Value: !Ref paramUniqueTagValue

  myEC2LT:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: !Sub 
        - 'lt-${tagvalue}'
        - tagvalue: !Ref paramUniqueTagValue
      LaunchTemplateData:
        ImageId: !FindInMap [DefaultAMI, Amazon, AMI]
        InstanceType: !FindInMap [DefaultInstanceType, T2-MICRO, IT]
        KeyName: !Ref myEC2KeyPair
        SecurityGroupIds: 
         - !Ref myEC2SG
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y httpd
            systemctl start httpd
            systemctl enable httpd
            echo "<h1>Hello This is ${paramUniqueTagValue}: $(($RANDOM % 10))!</h1>" > /var/www/html/index.html
      TagSpecifications:
        - ResourceType: "launch-template"
          Tags:
            - Key: !Ref paramUniqueTagName
              Value: !Ref paramUniqueTagValue
  mySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref paramOperatorEmail
          Protocol: email

  myASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: myEC2LT
    Properties:
      MinSize: 1
      MaxSize: 4
      DesiredCapacity: 2
      LaunchTemplate:
        LaunchTemplateId: !Ref myEC2LT
        Version: !GetAtt myEC2LT.LatestVersionNumber
      VPCZoneIdentifier:
       - !Ref myPrivateSubnetZone1
       - !Ref myPrivateSubnetZone2
      NotificationConfigurations:
        - TopicARN: !Ref mySNSTopic
          NotificationTypes: ['autoscaling:EC2_INSTANCE_LAUNCH', 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR', 'autoscaling:EC2_INSTANCE_TERMINATE', 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR']
      TargetGroupARNs:
        - !Ref myELBTG


## ======================= OUTPUT ====================== ##
Outputs:
  privateKey:
    Value: !GetAtt myEC2KeyPair.KeyFingerprint

